step "run-create-trident-database-runbacks" {
    name = "Run 'Create Trident Database' runbacks"

    action {
        notes = "**Runs on all environments**"
        properties = {
            Octopus.Action.Template.Id = "ActionTemplates-3"
            Octopus.Action.Template.Version = "14"
            Run.Runbook.Api.Key = "#{Project.Runbook.Api.Key}"
            Run.Runbook.AutoApproveManualInterventions = "No"
            Run.Runbook.Base.Url = "#{Octopus.Web.ServerUri}"
            Run.Runbook.CancelInSeconds = "1800"
            Run.Runbook.DateTime = "N/A"
            Run.Runbook.Environment.Name = "#{Octopus.Environment.Name}"
            Run.Runbook.Machines = "N/A"
            Run.Runbook.ManualIntervention.EnvironmentToUse = "#{Octopus.Environment.Name}"
            Run.Runbook.Name = "Create Trident Database"
            Run.Runbook.Space.Name = "#{Octopus.Space.Name}"
            Run.Runbook.UsePublishedSnapShot = "True"
            Run.Runbook.Waitforfinish = "True"
        }
        worker_pool = "default-worker-pool-1"
    }
}

step "deploy-a-package" {
    name = "Deploy a Package"
    properties = {
        Octopus.Action.TargetRoles = "octopus-web-server"
    }

    action "remove-the-server-from-the-load-balancer" {
        action_type = "Octopus.Script"
        environments = ["staging", "production"]
        name = "Remove the server from the load balancer"
        notes = "This step removes the server from a load balancer. **This step runs only for Staging/Prod**"
        properties = {
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.Script.ScriptBody = <<-EOT
                $machineName = $OctopusParameters["Octopus.Machine.Name"]
                
                Write-Host "Remove $machineName from the Load Balancer."
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool_variable = ""
    }

    action "deploy-a-package" {
        action_type = "Octopus.TentaclePackage"
        name = "Deploy a Package"
        notes = <<-EOT
                **This step deploys a package from the package library to the deployment target**
                
                EOT
        properties = {
            Octopus.Action.EnabledFeatures = "Octopus.Features.JsonConfigurationVariables"
            Octopus.Action.Package.DownloadOnTentacle = "False"
            Octopus.Action.Package.FeedId = "octopus-server-built-in"
            Octopus.Action.Package.JsonConfigurationVariablesTargets = "appSettings.json"
            Octopus.Action.Package.PackageId = "SingleRepoTrident.Web"
            Octopus.Action.RunOnServer = "false"
        }
        worker_pool_variable = ""

        packages {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = "SingleRepoTrident.Web"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }

    action "add-the-server-to-the-load-balancer" {
        action_type = "Octopus.Script"
        environments = ["staging", "production"]
        name = "Add the server to the load balancer"
        notes = "This step adds the server back into a load balancer. **This step runs only for Staging/Prod**"
        properties = {
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.Script.ScriptBody = <<-EOT
                $machineName = $OctopusParameters["Octopus.Machine.Name"]
                
                Write-Host "Add $machineName from the Load Balancer."
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool_variable = ""
    }
}

step "send-email-notification" {
    name = "Send status email"

    action {
        action_type = "Octopus.Email"
        is_disabled = true
        notes = <<-EOT
                **Sends email notification on Success**
                Email addresses can be configured through the Trident Notifications team configuration
                EOT
        properties = {
            Octopus.Action.Email.Body = "#{Notification.Body.Text}"
            Octopus.Action.Email.Subject = "#{Notification.Subject.Text}"
            Octopus.Action.Email.ToTeamIds = "trident-notifications"
            Octopus.Action.RunOnServer = "false"
        }
    }
}

step "slack-notification-to-octoplus-deploy-messaging-channel" {
    condition = "Failure"
    name = "Slack - Notification to octoplus-deploy-messaging channel"

    action {
        notes = "**Runs on failure only**"
        properties = {
            Octopus.Action.Template.Id = "ActionTemplates-1"
            Octopus.Action.Template.Version = "15"
            ssn_Channel = "octoplus-deploy-messaging"
            ssn_Color = "danger"
            ssn_HookUrl = "#{Notification.Slack.Webhook.Url}"
            ssn_IconUrl = "https://octopus.com/content/resources/favicon.png"
            ssn_Message = "#{Notification.Body.Text}"
            ssn_Title = "#{Notification.Subject.Text}"
            ssn_Username = "Octopus Deploy"
        }
        worker_pool = "default-worker-pool-1"
    }
}